#!/bin/bash
# 
# Autor	:	Inukaze ( From Venezuela )
# Sitio		:	http://https://goo.gl/ij6WqW
# Correo-E	:	bloginukaze@gmail.com
# Licensia	:	GPL 3
#
# Acerca de este Script	:	
#
# Yo intento escribir Scripts compatibles con
# Sistemas Operativos Unix & Posix , y cualquier
# Sistema Operativo que soporte versiones de la API
# conocida como "Wine" o "WineHQ" para poder ejecutar
# software de Microsoft Windows , sin necesidad de su
# sistema operativo , y crear paquetes autocontenidos
# para sistemas operativos como por ejemplo :
# Linux , FreeBSD , OpenSolaris 
# Unix  , BSD	  , Solaris		, MacOS

# Usando versiones pre-compiladas , para arquitecturas
# como x86 & x86_64 (32 Bits & 64 Bits ) con versiones
# Especificas de Wine/WineHQ y los Arquitecturaivos oficiales
# para "Windows" para una mayor compatibilidad usando
# los requisitos de Sistema Originales y que esto pueda
# ser aprovechado , por Juegos , Programas , Software
# Ahora apartir de aqui comienza mi Script :

XMessage=$(whereis xmessage | grep bin | awk '{print $2}' | sed 's/^[/usr/bin/ \t]*//')

if [ $XMessage = xmessage ]; then
	echo 
	echo 'Mostrar el Mensaje en el Sistema Grafico -> "Se Esta Configurando El Software"'
	echo
	xmessage -nearmouse -timeout 5 "Se Esta Configurando El Software" -buttons OK &
else
	echo
	echo "xmessage - NO! ESTA INSTALADO"
	echo
	echo "Se esta Configurando el Software"
fi


# Definir el directorio actual , como el principal
# del juego o programa
RUTA=""$( cd -P "$( dirname "$" )" && pwd )""
RUTA_DEL_SOFTWARE="$RUTA"/wine/data/drive_c/software
RUTASYSTEM32="$RUTA"/wine/data/drive_c/windows/system32
ARREGLOS="$RUTA"/arreglos

# Borrar Toda Configuracion Previa WINE:
rm -rf "$RUTA/wine/data/drive_c/users"
rm -rf "$RUTA/wine/data/drive_c/windows"
rm -rf "$RUTA/wine/data/Program Files (x86)"
rm -rf "$RUTA/wine/data/Program Files"
rm -rf "$RUTA/wine/data/drive_c/Archivos de programa"
rm -rf "$RUTA/wine/data/drive_c/Program Files (x86)"
rm -rf "$RUTA/wine/data/drive_c/Program Files"
rm -rf "$RUTA/wine/data/system.reg"
rm -rf "$RUTA/wine/data/user.reg"
rm -rf "$RUTA/wine/data/userdef.reg"
rm -rf "$RUTA/wine/data/dosdevices"
rm -rf "$RUTA/wine/data/.update-timestamp"
rm -rf "$RUTA/wine/.DS_Store"
rm -rf "$RUTA/wine/linux/.DS_Store"
rm -rf "$RUTA/wine/linux/x86/.DS_Store"
rm -rf "$RUTA/wine/linux/x86_64/.DS_Store"
rm -rf "$RUTA/wine/linux/x86/bin/.DS_Store"
rm -rf "$RUTA/wine/linux/x86_64/bin/.DS_Store"
rm -rf "$RUTA/wine/mac/.DS_Store"
rm -rf "$RUTA/wine/mac/x86/.DS_Store"
rm -rf "$RUTA/wine/mac/x86_64/.DS_Store"
rm -rf "$RUTA/wine/mac/x86/bin/.DS_Store"
rm -rf "$RUTA/wine/mac/x86_64/bin/.DS_Store"
rm -rf "$RUTA"/wine/data/cachedmetrics.\:0

# Obtener el nombre del nucleo del sistema
Nucleo=$(uname -s)

if		[ $Nucleo = "Darwin" ]; then
		Nucleo=mac
elif		[ $Nucleo = "Linux" ]; then
		Nucleo=linux
elif		[ $Nucleo = "FreeBSD" ]; then
		Nucleo=linux
elif		[ $Nucleo = "OpenSolaris" ]; then
		Nucleo=linux
else
		echo "Sistema Operativo NO SOPORTADO"
fi

# Determinando la arquitectura de la maquina
Arquitectura=$(uname -m)

if	       [ $Arquitectura = "i386" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEDLLPATH="$PWD/wine/$Nucleo/x86/lib"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			export WINEDLLOVERRIDES=mshtml=wine cmd echo test
			Arquitectura="32 Bits"
	elif	[ $Arquitectura = "i486" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEDLLPATH="$PWD/wine/$Nucleo/x86/lib"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			export WINEDLLOVERRIDES=mshtml=wine cmd echo test
			Arquitectura="32 Bits"
	elif	[ $Arquitectura = "i586" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEDLLPATH="$PWD/wine/$Nucleo/x86/lib"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			export WINEDLLOVERRIDES=mshtml=wine cmd echo test
			Arquitectura="32 Bits"
	elif	[ $Arquitectura = "i686" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEDLLPATH="$PWD/wine/$Nucleo/x86/lib"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			export WINEDLLOVERRIDES=mshtml=wine cmd echo test
			Arquitectura="32 Bits"
         elif [ $Arquitectura = "x86_64" ]; then
			PATH="$PWD/wine/$Nucleo/x86_64/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86_64/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86_64/bin/wine"
			export WINEDLLPATH="$PWD/wine/$Nucleo/x86_64/lib"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			export WINEDLLOVERRIDES=mshtml=wine cmd echo test
			Arquitectura="64 Bits"
	else
		echo "Arquitectura NO SOPORTADA"
fi
# Determinando la arquitectura de la maquina

# Modo Ventana/Pantalla Completa :
echo "REGEDIT4" >> modo_ventana.reg
echo "" >> modo_ventana.reg
echo "[HKEY_CURRENT_USER\Software\Wine\Explorer]" >> modo_ventana.reg
echo '"Desktop"="Default"' >> modo_ventana.reg
echo "" >> modo_ventana.reg
echo "[HKEY_CURRENT_USER\Software\Wine\Explorer\Desktops]" >> modo_ventana.reg

# Para Activar el Modo Ventana :
#echo '"Default"'='"'"800x600"'"' >> modo_ventana.reg

# Para DesActivar el Modo Ventana :
echo '"Default"'='"'""'"' >> modo_ventana.reg

regedit -s modo_ventana.reg
rm -rf modo_ventana.reg
killall -9 services.exe winedevice.exe plugplay.exe explorer.exe

# Modo Ventana/Pantalla Completa :

# Copiar DirectX al "Sistema" (de Wine)
cd "$RUTA"/arreglos/windows/system32
mkdir -p "$RUTA"/wine/data/drive_c/windows/system32
cp *.* "$RUTA"/wine/data/drive_c/windows/system32
cd "$RUTA"/wine/data/drive_c/windows/system32/
echo ""
echo "DirectX Instalado Correctamente"
echo "Se Procede a Registrarlo en el Sistema"
echo ""

# Registrar las Librerias de DirectX (Nativo)
regsvr32 ddraw.dll
regsvr32 ddrawex.dll
regsvr32 dinput.dll
regsvr32 dplayx.dll
regsvr32 dpnet.dll
regsvr32 dpnhpast.dll
regsvr32 dpnmodem.dll
regsvr32 eax.dll

# Al Activar los siguientes
# Me Limita el CPU a 1 Ghz :
#regsvr32 rpcrt4.dll
#regsvr32 userenv.dll

# Agregar Manualmente el Registro de las
# Bibliotecas DirectX Nativas de Windows
# Al Registro de WINE para su correcto Funcionamiento
# Agregar valores de DirectX & DirectPlay al Registro

# - Esto es DirectX 9.X? (Nativo de Windows XP SP 3)
echo "REGEDIT4" >> arreglos.reg
echo "" >> arreglos.reg
echo "[HKEY_CURRENT_USER\Software\Wine\DllOverrides]" >> arreglos.reg
echo '"dnsapi.dll"="native"' >> arreglos.reg
echo '"dplay.dll"="native"' >> arreglos.reg
echo '"dplaysvr.exe"="native"' >> arreglos.reg
echo '"dpnaddr.dll"="native"' >> arreglos.reg
echo '"dpnlobby.dll"="native"' >> arreglos.reg
echo '"dpwsockx.dll"="native"' >> arreglos.reg
echo '"dpnwsock.dll"="native"' >> arreglos.reg
echo '"dpwsock.dll"="native"' >> arreglos.reg
echo '"dpwsockx.dll"="native"' >> arreglos.reg
echo '"mswsock.dll"="native"' >> arreglos.reg
echo '"wsock32.dll"="native"' >> arreglos.reg
echo '"GdiPlus.dll"="native"' >> arreglos.reg
echo '"gdi32.dll"="native"' >> arreglos.reg
echo '"glu32.dll"="native"' >> arreglos.reg
echo '"nvoglnt.dll"="native"' >> arreglos.reg
echo '"opengl32.dll"="native"' >> arreglos.reg
echo '"kernel32.dll"="native"' >> arreglos.reg
echo '"ntdll.dll"="native"' >> arreglos.reg
echo '"user32.dll"="native"' >> arreglos.reg
echo '' >> arreglos.reg
echo ""
echo "Se ha Registrado DirectX con DirectPlay exitosamente"
echo ""

# Mas Arreglos de Video & Sonido
# Extraer la cantidad de MB de video
tvid=$(lspci -v -s `lspci | awk '/VGA/{print $1}'` | sed -n '/Memory.*, prefetchable/s/.*\[size=\([^]]\+\)M\]/\1/p')

# Dividir los MB de video totales
# Depende del Juego usado en Wine
# Siempre dividir por un Numero PAR 
# Para evitar errores
# utiliza ; 2 , 4 , 8 , 16 , 32 .
let "mvid"=$tvid/2
echo 'REGEDIT4' >> dsound.reg
echo '' >> dsound.reg
echo '[HKEY_CURRENT_USER\Software\Wine\DirectSound]' >> dsound.reg
echo '"DefaultSampleRate"="44100"' >> dsound.reg
echo '"HardwareAcceleration"="Emulation"' >> dsound.reg
echo "" >> dsound.reg
regedit -s dsound.reg
rm -rf dsound.reg

echo 'REGEDIT4' >> video.reg
echo '' >> video.reg
echo '[HKEY_CURRENT_USER\Software\Wine\Direct3D]' >> video.reg
#echo '"DirectDrawRenderer"="opengl"' >> video.reg
echo '"UseGLSL"="disabled"' >> video.reg
echo '"OffscreenRenderingMode"="pbuffer"' >> video.reg
echo '"VertexShaderMode"="hardware"' >> video.reg
echo '"PixelShaderMode"="enabled"' >> video.reg
echo '"VideoMemorySize"'='"'"$mvid"'"' >> video.reg
# Configuracion Alternativas Desactivadas :
#echo '"AlwaysOffscreen"="enable"' >> video.reg
echo '"DirectDrawRenderer"="gdi"' >> video.reg
#echo '"PixelShaderMode"="disabled"' >> video.reg
#echo '"RenderTargetLockMode"="readtex"' >> video.reg
#echo '"DirectDrawRenderer"="pbuffer"' >> video.reg
#echo '"VertexShaderMode"="none"' >> video.reg
echo '"StrictDrawOrdering"="enable"' >> video.reg
echo '' >> video.reg
regedit -s video.reg
rm -rf video.reg

echo ""
echo ""
echo "Se ha establecido la configuracion 3D"
echo "Para neverwinter Nights , utilizando la mitad"
echo "de la memoria de video disponible"
echo 'El Juego usara "'"$mvid MB"'" de Video'
echo ""
echo ""

# Registrar las Bibliotecas y Borrar Arquitecturaivos de Registro
echo "Escribiendo Configuraciones pertinentes"
echo "De NeverWinterNights en el Sistema de WINE"
echo ""
exec `wine regedit -s arreglos.reg` && `rm -rf arreglos.reg`
exec `wine regedit -s "$RUTA"/arreglos/DirectX.reg`

# Agregar al registro la informacion del juego :
cd "$RUTA"/arreglos
wine regedit -S "software.reg"

echo "Se ha escrito la configuracion del Juego correctamente"

# Configurador de NeverWinterNights
cd "$RUTA"/wine/data/drive_c/software/
echo ""
echo "Se iniciara la aplicacion de configuracion"
echo "de NeverWinterNights (Nativa para Windows)"
echo ""
echo ""
BIN=$(`wine nwconfig.exe`)
#BIN=$(`wine NWNSpanish1.68OrigUpdate.exe`)

# Detectar el Directorio "Escritorio"
# Dentro del usuario actual

cd $HOME

if [ -e Desktop ]; then cd Desktop; DirectorioEscritorio=$HOME/Desktop; fi
if [ -e Escritorio ]; then cd Escritorio; DirectorioEscritorio=$HOME/Escritorio; fi

cd $DirectorioEscritorio

# Escribir Los Archivos de "Enlace(s)"
# Necesarios dentro de la Carpeta "$HOME/$DirectorioEscritorio/Limbo"

# Primero Borrar cualquier archivo Anterior
# De Escritorio , para Evitar Conflictos y no crear archivos innecesarios.

if [ -f "Neverwinter Nights - Configurar.desktop" ]; then rm -rf "Neverwinter Nights - Configurar.desktop"; fi
if [ -f "Neverwinter Nights - Jugar.desktop" ]; then rm -rf "Neverwinter Nights - Jugar.desktop"; fi

#Crear Enlaces en la Carpeta "$DirectorioEscritorio/NeverWinter Nights"
#Del Software que configura este Script.

# NeverWinter Nights : Configurar & Jugar :
touch "Neverwinter Nights - Configurar.desktop"
echo "#!/usr/bin/env xdg-open"  >> "Neverwinter Nights - Configurar.desktop"
echo "" >> "Neverwinter Nights - Configurar.desktop"
echo '[Desktop Entry]' >> "Neverwinter Nights - Configurar.desktop"
echo "Version=1.0" >> "Neverwinter Nights - Configurar.desktop"
echo "Type=Application" >> "Neverwinter Nights - Configurar.desktop"
echo "Terminal=false" >> "Neverwinter Nights - Configurar.desktop"
echo 'Exec=sh "'$RUTA'"/.LanzarNWNConfig' >> "Neverwinter Nights - Configurar.desktop"
echo "Name=Neverwinter Nights - Configurar" >> "Neverwinter Nights - Configurar.desktop"
echo "Icon=$RUTA/.NWNConfig.png" >> "Neverwinter Nights - Configurar.desktop"

touch "Neverwinter Nights - Jugar.desktop"
echo "#!/usr/bin/env xdg-open"  >> "Neverwinter Nights - Jugar.desktop"
echo "" >> "Neverwinter Nights - Jugar.desktop"
echo '[Desktop Entry]' >> "Neverwinter Nights - Jugar.desktop"
echo "Version=1.0" >> "Neverwinter Nights - Jugar.desktop"
echo "Type=Application" >> "Neverwinter Nights - Jugar.desktop"
echo "Terminal=false" >> "Neverwinter Nights - Jugar.desktop"
echo 'Exec=sh "'$RUTA'"/.LanzarNWN' >> "Neverwinter Nights - Jugar.desktop"
echo "Name=Neverwinter Nights - Jugar" >> "Neverwinter Nights - Jugar.desktop"
echo "Icon=$RUTA/.NWN.png" >> "Neverwinter Nights - Jugar.desktop"

# Marcar como de Confianza (Dar Permiso de Ejecucion):
chmod a+x "Neverwinter Nights - Configurar.desktop"
chmod a+x "Neverwinter Nights - Jugar.desktop"
# NeverWinter Nights : Configurar & Jugar.

# -- Enlaces de Modo Ventana --
# Escribir Los Archivos de "Enlace(s)"

if [ -f "Neverwinter Nights - Jugar (Modo Ventana).desktop" ]; then rm -rf "Neverwinter Nights - Jugar (Modo Ventana).desktop"; fi

#Crear Enlaces en la Carpeta "$DirectorioEscritorio/Limbo"
#Del Software que configura este Script.


# NeverWinter Nights - Jugar (Modo Ventana)
touch "Neverwinter Nights - Jugar (Modo Ventana).desktop"
echo "#!/usr/bin/env xdg-open"  >> "Neverwinter Nights - Jugar (Modo Ventana).desktop"
echo "" >> "Neverwinter Nights - Jugar (Modo Ventana).desktop"
echo '[Desktop Entry]' >> "Neverwinter Nights - Jugar (Modo Ventana).desktop"
echo "Version=1.0" >> "Neverwinter Nights - Jugar (Modo Ventana).desktop"
echo "Type=Application" >> "Neverwinter Nights - Jugar (Modo Ventana).desktop"
echo "Terminal=false" >> "Neverwinter Nights - Jugar (Modo Ventana).desktop"
echo 'Exec=sh "'$RUTA'"/.MV_LanzarNWN' >> "Neverwinter Nights - Jugar (Modo Ventana).desktop"
echo "Name=Neverwinter Nights - Jugar (Modo Ventana)" >> "Neverwinter Nights - Jugar (Modo Ventana).desktop"
echo "Icon=$RUTA/.NWN.png" >> "Neverwinter Nights - Jugar (Modo Ventana).desktop"
# NeverWinter Nights - Jugar (Modo Ventana)

# Marcar como de Confianza (Dar Permiso de Ejecucion):
chmod a+x "Neverwinter Nights - Jugar (Modo Ventana).desktop"


while Launchers=$(pidof "nwconfig.exe")
	do   
	    sleep 1	
	done

	if [ $XMessage = xmessage ]; then
		echo
		echo 'Mostrar el Mensaje en el Sistema Grafico -> "Se Esta Configurando El Software"'
		echo
		xmessage -nearmouse -timeout 5 "Se Ha Configurado Exitosamente" -buttons OK &
	else
		echo
		echo "xmessage - NO! ESTA INSTALADO"
		echo
		echo "Se Ha Configurado Exitosamente"
		echo
	fi
exit 1
