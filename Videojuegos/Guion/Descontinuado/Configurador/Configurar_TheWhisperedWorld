#!/bin/sh
#!/bin/bash
# 
# Autor	:	Inukaze ( Venezuela )
# Sitio		:	http://inukaze.wordpResolucions.com
# Correo-E	:	bloginukaze@gmail.com
# Licensia	:	GPL 3
#
# Acerca de este Script	:	
#
# Yo intento escribir Scripts compatibles con
# Sistemas Operativos Unix & Posix , y cualquier
# Sistema Operativo que soporte versiones de la API
# conocida como "Wine" o "WineHQ" para poder ejecutar
# software de Microsoft Windows , sin necesidad de su
# sistema operativo , y crear paquetes autocontenidos
# para sistemas operativos como por ejemplo :
# Linux , FreeBSD , OpenSolaris 
# Unix  , BSD	  , Solaris		, MacOS

# Usando versiones pre-compiladas , para arquitecturas
# como x86 & x86_64 (32 Bits & 64 Bits ) con versiones
# Especificas de Wine/WineHQ y los Arquitecturaivos oficiales
# para "Windows" para una mayor compatibilidad usando
# los requisitos de Sistema Originales y que esto pueda
# ser aprovechado , por Juegos , Programas , Software
# Ahora apartir de aqui comienza mi Script :

xmessage -timeout 3 "Se Esta Configurando El Software" &

# Definir el directorio actual , como el principal
# del juego o programa
RUTA=""$( cd -P "$( dirname "$" )" && pwd )""
RUTA_C="$RUTA/wine/data/drive_c"
ARREGLOS="$RUTA/arreglos"

# Obtener el nombre del nucleo del sistema
Nucleo=$(uname -s)

if		[ $Nucleo = "Darwin" ]; then
		Nucleo=mac
elif		[ $Nucleo = "Linux" ]; then
		Nucleo=linux
else
		echo "Sistema Operativo NO SOPORTADO"
fi

# Determinando la arquitectura de la maquina
Arquitectura=$(uname -m)

if	       [ $Arquitectura = "i386" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			Arquitectura="32 Bits"
	elif	[ $Arquitectura = "i486" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			Arquitectura="32 Bits"
	elif	[ $Arquitectura = "i586" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			Arquitectura="32 Bits"
	elif	[ $Arquitectura = "i686" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			Arquitectura="32 Bits"
         elif [ $Arquitectura = "x86_64" ]; then
			PATH="$PWD/wine/$Nucleo/x86_64/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86_64/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86_64/bin/wine"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			Arquitectura="64 Bits"
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dplaysvr.exe
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/DPLAYSVR.exe
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dplayx.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/DPLAYX.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dpmodemx.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/DPMODEMX.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dpnet.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/DPNET.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dpnhpast.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/DPNHPAST.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dpnlobby.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/DPNLOBBY.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dpnsvr.exe
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/DPNSVR.exe
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dpwsockx.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/DPWSOCKX.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dplaysvr.exe
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3d8.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3d8thk.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3d9.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3dim.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3dim700.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3dpmesh.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3dramp.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3drm.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3dx9_24.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3dx9_25.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3dx9_26.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3dx9_27.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3dx9_28.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3dx9_29.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3dx9_30.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3dx9_31.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3dx9_32.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3dx9_33.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3dx9_34.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3dx9_35.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3dx9_36.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/D3DX9_37.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/d3dxof.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dciman32.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/ddrawex.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/devenum.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dinput.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dinput8.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dmband.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dmcompos.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dmime.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dmloader.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dmscript.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dmstyle.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dmsynth.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dmusic.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dnsapi.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dplay.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dpnaddr.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dpnmodem.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dsound.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dsound3d.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dswave.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dxdiagn.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/mscoree.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/msdmo.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/qcap.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/quartz.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/streamci.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dpnhupnp.dll
			rm -rf "$RUTA"/wine/data/drive_c/windows/syswow64/dpserial.dll
			mkdir -p "$RUTA"/wine/data/drive_c/windows/syswow64
			cd "$RUTA"/wine/data/drive_c/software/directx
			cp -rf *.* "$RUTA"/wine/data/drive_c/windows/syswow64
	else
		echo "Arquitectura NO SOPORTADA"
fi 

# Borrar Toda Configuracion Previa WINE:
rm -rf "$RUTA/wine/data/drive_c/users"
rm -rf "$RUTA/wine/data/drive_c/windows"
rm -rf "$RUTA/wine/data/Program Files (x86)"
rm -rf "$RUTA/wine/data/drive_c/Archivos de programa"
rm -rf "$RUTA/wine/data/drive_c/Program Files (x86)"
rm -rf "$RUTA/wine/data/system.reg"
rm -rf "$RUTA/wine/data/user.reg"
rm -rf "$RUTA/wine/data/userdef.reg"
rm -rf "$RUTA/wine/data/dosdevices"
rm -rf "$RUTA/wine/data/.update-timestamp"
rm -rf "$RUTA/wine/.DS_Store"
rm -rf "$RUTA/wine/linux/.DS_Store"
rm -rf "$RUTA/wine/linux/x86/.DS_Store"
rm -rf "$RUTA/wine/linux/x86_64/.DS_Store"
rm -rf "$RUTA/wine/linux/x86/bin/.DS_Store"
rm -rf "$RUTA/wine/linux/x86_64/bin/.DS_Store"
rm -rf "$RUTA/wine/mac/.DS_Store"
rm -rf "$RUTA/wine/mac/x86/.DS_Store"
rm -rf "$RUTA/wine/mac/x86_64/.DS_Store"
rm -rf "$RUTA/wine/mac/x86/bin/.DS_Store"
rm -rf "$RUTA/wine/mac/x86_64/bin/.DS_Store"
rm -rf "$RUTA"/wine/data/cachedmetrics.\:0

# Muestra en la terminal La arquitectura &
# La version especifica de Wine usada
Version_De_Wine=$(wine --version)
echo ""
echo ""
echo "Usando '$Version_De_Wine' en '$Nucleo' ( Maquina de '$Arquitectura' )"
echo ""
echo ""

# Copiar los archivos nativos (arreglos)
# a las carpetas de Wine
mkdir -p "$RUTA_C/windows/system32/gecko/plugin"
mkdir -p "$RUTA_C/windows/system32/gecko/1.4/wine_gecko/components"
mkdir -p "$RUTA_C/windows/system32/gecko/1.4/wine_gecko/dictionaries"
mkdir -p "$RUTA_C/windows/system32/gecko/1.4/wine_gecko/hyphenation"

cd "$ARREGLOS/windows/system32"
cp *.* "$RUTA_C/windows/system32" && cd "$RUTA_C/windows/system32"
wine regedit -s "$RUTA"/arreglos/Gecko.reg

# Registrar Librerias con RegSvr32 ;
regsvr32 clbcatq.dll
regsvr32 comdlg32.dll
regsvr32 ddraw.dll
regsvr32 dsound.dll
regsvr32 ole32.dll
regsvr32 oleaut32.dll


# - Esto es DirectX 9.X? (Nativo de Windows XP SP 3)
echo "REGEDIT4" >> arreglos.reg
echo "" >> arreglos.reg
echo "[HKEY_CURRENT_USER\Software\Wine\DllOverrides]" >> arreglos.reg
echo '"advapi32.dll"="native"' >> arreglos.reg
echo '"audiere.dll"="native"' >> arreglos.reg
echo '"avcodec-52.dll"="native"' >> arreglos.reg
echo '"avdevice-52.dll"="native"' >> arreglos.reg
echo '"avformat-52.dll"="native"' >> arreglos.reg
echo '"avutil-50.dll"="native"' >> arreglos.reg
echo '"comctl32.dll"="native"' >> arreglos.reg
echo '"comres.dll"="native"' >> arreglos.reg
echo '"ctype.nls"="native"' >> arreglos.reg
echo '"dciman32.dll"="native"' >> arreglos.reg
echo '"gdi32.dll"="native"' >> arreglos.reg
echo '"glu32.dll"="native"' >> arreglos.reg
echo '"imm32.dll"="native"' >> arreglos.reg
echo '"kbdsp.dll"="native"' >> arreglos.reg
echo '"kbdus.dll"="native"' >> arreglos.reg
echo '"kernel32.dll"="native"' >> arreglos.reg
echo '"locale.nls"="native"' >> arreglos.reg
echo '"msvcrt.dll"="native"' >> arreglos.reg
echo '"ntdll.dll"="native"' >> arreglos.reg
echo '"opengl32.dll"="native"' >> arreglos.reg
echo '"SDL.dll"="native"' >> arreglos.reg
echo '"sorttbls.nls"="native"' >> arreglos.reg
echo '"swscale-0.dll"="native"' >> arreglos.reg
echo '"unicode.nls"="native"' >> arreglos.reg
echo '"user32.dll"="native"' >> arreglos.reg
echo '"wdmaud.drv"="native"' >> arreglos.reg
echo '"win32k.sys"="native"' >> arreglos.reg
echo '"winmm.dll"="native"' >> arreglos.reg


wine regedit -s "$ARREGLOS"/DirectX.reg
wine regedit -s "$ARREGLOS"/"$Nucleo"_video.reg
wine regedit -s "$ARREGLOS"/"$Nucleo"_sonido.reg

# Ejecutando Programa / Software / Juego
cd "$RUTA/wine/data/drive_c/software"


# Detectar el Directorio "Escritorio"
# Dentro del usuario actual

cd $HOME
if [ -e Desktop ]; then cd Desktop; DirectorioEscritorio=$HOME/Desktop; fi
if [ -e Escritorio ]; then cd Escritorio; DirectorioEscritorio=$HOME/Escritorio; fi

if [ ! -e $DirectorioEscritorio/Wine ]; then
mkdir -p $DirectorioEscritorio/Wine
cd $DirectorioEscritorio/Wine
fi

if [ -e $DirectorioEscritorio/Wine ]; then
cd $DirectorioEscritorio/Wine
fi

# Escribir Los Archivos de "Enlace(s)"
# Necesarios dentro de la Carpeta "$HOME/$DirectorioEscritorio/Wine"

# Primero Borrar cualquier archivo Anterior
# De Escritorio , para Evitar Conflictos y no crear archivos innecesarios.

Enlace="The Whispered World.desktop"

if [ -f "The Whispered World.desktop" ]; then rm -rf "The Whispered World.desktop"; fi
touch "The Whispered World.desktop"
echo "#!/usr/bin/env xdg-open"  >> "The Whispered World.desktop"
echo "" >> "The Whispered World.desktop"
echo '[Desktop Entry]' >> "The Whispered World.desktop"
echo "Version=1.0" >> "The Whispered World.desktop"
echo "Type=Application" >> "The Whispered World.desktop"
echo "Terminal=false" >> "The Whispered World.desktop"
echo 'Exec=sh "'$RUTA'"/.Lanzar' >> "The Whispered World.desktop"
echo "Name=The Whispered World" >> "The Whispered World.desktop"
echo "Icon=$RUTA/.sadwick.png" >> "The Whispered World.desktop"
echo "Path=$RUTA" >> "The Whispered World.desktop"
echo "StartupNotify=true" >> "The Whispered World.desktop"
echo "X-KDE-SubstituteUID=false" >> "The Whispered World.desktop"

# Marcar como de Confianza (Dar Permiso de Ejecucion):
chmod a+x "The Whispered World.desktop"

xmessage -timeout 3 "Se Ha Configurado Exitosamente"
