#!/bin/sh
#!/bin/bash
#
# Autor	:	Inukaze ( Venezuela )
# Sitio		:	http://inukaze.wordpResolucions.com
# Correo-E	:	bloginukaze@gmail.com
# Licensia	:	GPL 3
#
# Acerca de este Script	:
#
# Yo intento escribir Scripts compatibles con
# Sistemas Operativos Unix & Posix , y cualquier
# Sistema Operativo que soporte versiones de la API
# conocida como "Wine" o "WineHQ" para poder ejecutar
# software de Microsoft Windows , sin necesidad de su
# sistema operativo , y crear paquetes autocontenidos
# para sistemas operativos como por ejemplo :
# Linux , FreeBSD , OpenSolaris 
# Unix  , BSD	  , Solaris		, MacOS

# Usando versiones pre-compiladas , para arquitecturas
# como x86 & x86_64 (32 Bits & 64 Bits ) con versiones
# Especificas de Wine/WineHQ y los Arquitecturaivos oficiales
# para "Windows" para una mayor compatibilidad usando
# los requisitos de Sistema Originales y que esto pueda
# ser aprovechado , por Juegos , Programas , Software
# Ahora apartir de aqui comienza mi Script :

# Definir el directorio actual , como el principal
# del juego o programa
RUTA=""$( cd -P "$( dirname "$" )" && pwd )""

# Obtener el nombre del nucleo del sistema
Nucleo=$(uname -s)

if		[ $Nucleo = "Darwin" ]; then
		Nucleo=mac
elif		[ $Nucleo = "Linux" ]; then
		Nucleo=linux
elif		[ $Nucleo = "FreeBSD" ]; then
		Nucleo=linux
else
		echo "Sistema Operativo NO SOPORTADO"
fi

# Determinando la arquitectura de la maquina
Arquitectura=$(uname -m)

if	       [ $Arquitectura = "i386" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			Arquitectura="32 Bits"
	elif	[ $Arquitectura = "i486" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			Arquitectura="32 Bits"
	elif	[ $Arquitectura = "i586" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			Arquitectura="32 Bits"
	elif	[ $Arquitectura = "i686" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			Arquitectura="32 Bits"
         elif [ $Arquitectura = "x86_64" ]; then
			export WINESERVER="$PWD/wine/$Nucleo/x86_64/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86_64/bin/wine"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			Arquitectura="64 Bits"
	else
		echo "Arquitectura NO SOPORTADA"
fi

# Muestra en la terminal La arquitectura &
# La version especifica de Wine usada
wver=$(wine --version)
echo ""
echo ""
echo "Corriendo '$wver' en '$Nucleo' ( Maquina de '$Arquitectura' Bits )"
echo ""
echo ""
# Ejecutando Programa / Software / Juego
cd "$RUTA/wine/data/drive_c/software"

# Solucion de Resolucion - Parte 1
echo `xrandr --current | grep current | awk '{print $8}'` >> Resolucion1
echo `xrandr --current | grep current | awk '{print $10}'` >> Resolucion2
cat Resolucion2 | sed -i 's/,//g' Resolucion2
P1Resolucion=$(cat Resolucion1)
P2Resolucion=$(cat Resolucion2)
rm Resolucion1 Resolucion2
echo "$P1Resolucion"'x'"$P2Resolucion" >> Resolucion
Resolucion=$(cat Resolucion)
rm Resolucion
# Solucion de Resolucion - Parte 1

while true; do
  menu_launch="$(zenity  --width 523 --height 430 --list --radiolist  --column "Opción" --column "Descripción" TRUE  "Iniciar Juego + Expansion" FALSE "Iniciar Juego + Expansion con Musica - Timidity via ALSA" FALSE "Iniciar Juego + Expansion con Musica - Fluidsyntn via ALSA" FALSE "Iniciar Juego + Expansion con Musica - Fluidsyntn via PulseAudio" FALSE "Salir" )" 
if [ "$menu_launch" = "Salir" ]; then
echo done
exit
 elif [ "$menu_launch" = "Iniciar Juego + Expansion" ]; then
	`killall -9 pulseaudio timidity timidity++ fluidsynth empiresx.exe wineserver services.exe winedevice.exe plugplay.exe explorer.exe` 
	`xrandr -s 800x600`
#	pulseaudio &
	killall -9 unclutter
	export SDL_MOUSE_RELATIVE=0
	export SDL_VIDEO_X11_DGAMOUSE=0
	WINEDEBUG=-all wine empiresx.exe
	# unclutter &
	# Solucion de Resolucion - Parte 2
	xrandr -s $Resolucion
	# Solucion de Resolucion - Parte 2
	`killall -9 Iniciar`
 `killall -9 pulseaudio timidity timidity++ fluidsynth empiresx.exe wineserver services.exe winedevice.exe plugplay.exe explorer.exe` 
 elif [ "$menu_launch" = "Iniciar Juego + Expansion con Musica - Timidity via ALSA" ]; then
	`killall -9 timidity timidity++ fluidsynth empiresx.exe wineserver services.exe winedevice.exe plugplay.exe explorer.exe`
	`xrandr -s 800x600`
	timidity -iA --module=16 --cache-size=65536 --audio-buffer=200% &
	killall -9 unclutter
	export SDL_MOUSE_RELATIVE=0
	export SDL_VIDEO_X11_DGAMOUSE=0
	export alsasink device="hw:0,0"
	export ALSASINK_DEVICE="hw:0,0"
	WINEDEBUG=-all wine empiresx.exe
	# unclutter &
	# Solucion de Resolucion - Parte 2
	xrandr -s $Resolucion
	# Solucion de Resolucion - Parte 2
	`killall -9 Iniciar`
 `killall -9 pulseaudio timidity timidity++ fluidsynth empiresx.exe wineserver services.exe winedevice.exe plugplay.exe explorer.exe` 
 elif [ "$menu_launch" = "Iniciar Juego + Expansion con Musica - Fluidsyntn via ALSA" ]; then
	`killall -9 fluidsynth pulseaudio timidity timidity++ empiresx.exe wineserver services.exe winedevice.exe plugplay.exe explorer.exe`
	`xrandr -s 800x600`
##	pulseaudio &
	fluidsynth -l -s -i -aalsa -o audio.alsa.device=default /usr/share/sounds/sf2/Unison.sf2 &
	killall -9 unclutter
	export SDL_MOUSE_RELATIVE=0
	export SDL_VIDEO_X11_DGAMOUSE=0
	export alsasink device="hw:0,0"
	WINEDEBUG=-all wine empiresx.exe
	# unclutter &
	# Solucion de Resolucion - Parte 2
	xrandr -s $Resolucion
	# Solucion de Resolucion - Parte 2
	`killall -9 Iniciar`
 `killall -9 pulseaudio timidity timidity++ fluidsynth empiresx.exe wineserver services.exe winedevice.exe plugplay.exe explorer.exe` 
 elif [ "$menu_launch" = "Iniciar Juego + Expansion con Musica - Fluidsyntn via PulseAudio" ]; then
	`killall -9 fluidsynth pulseaudio timidity timidity++ empiresx.exe wineserver services.exe 		 winedevice.exe plugplay.exe explorer.exe` 
#	pulseaudio &
	fluidsynth -l -s -i -apulseaudio -o audio.pulseaudio.device=default /usr/share/sounds/sf2/FluidR3_GM.sf2 & 
	`xrandr -s 800x600`
	killall -9 unclutter
	export SDL_MOUSE_RELATIVE=0
	export SDL_VIDEO_X11_DGAMOUSE=0
	WINEDEBUG=-all wine empiresx.exe
	# unclutter &
	# Solucion de Resolucion - Parte 2
	xrandr -s $Resolucion
	# Solucion de Resolucion - Parte 2
	`killall -9 Iniciar`
 `killall -9 pulseaudio timidity timidity++ fluidsynth empiresx.exe wineserver services.exe winedevice.exe plugplay.exe explorer.exe` 
else
 clear
 xmessage "Opcion Incorrecta , Debes Seleccionar Alguna Y Aceptarla"
 fi
done
