#!/bin/bash
# 
# Author	:	Inukaze ( From Venezuela )
# Site		:	http://https://goo.gl/ij6WqW
# E-Mail	:	bloginukaze@gmail.com
# License	:	GPL 3
#
# Acerca de este Script	:	
#
# Yo intento escribir Scripts compatibles con
# Sistemas Operativos Unix & Posix , y cualquier
# Sistema Operativo que soporte versiones de la API
# conocida como "Wine" o "WineHQ" para poder ejecutar
# software de Microsoft Windows , sin necesidad de su
# sistema operativo , y crear paquetes autocontenidos
# para sistemas operativos como por ejemplo :
# Linux , FreeBSD , OpenSolaris 
# Unix  , BSD	  , Solaris		, MacOS

# Usando versiones pre-compiladas , para arquitecturas
# como x86 & x86_64 (32 Bits & 64 Bits ) con versiones
# Especificas de Wine/WineHQ y los Arquitecturaivos oficiales
# para "Windows" para una mayor compatibilidad usando
# los requisitos de Sistema Originales y que esto pueda
# ser aprovechado , por Juegos , Programas , Software
# Ahora apartir de aqui comienza mi Script :

# Este Script es para Solucionar problemas de Directx
# Para el Software que esta Intentado Ejecutar
# Como NATIVO de un SISTEMA QUE NO ES WINDOWS

# Definir el directorio actual , como el principal
# del juego o programa
RUTA=""$( cd -P "$( dirname "$" )" && pwd )""
RUTA_DEL_SOFTWARE="$RUTA"/wine/data/drive_c/Nintendo64/Project64k
RUTASYSTEM32="$RUTA"/wine/data/drive_c/windows/system32
ARREGLOS="$RUTA"/arreglos
Nucleo=$(uname -s)

if		[ $Nucleo = "Darwin" ]; then
		Nucleo=mac
elif		[ $Nucleo = "Linux" ]; then
		Nucleo=linux
elif		[ $Nucleo = "FreeBSD" ]; then
		Nucleo=linux
elif		[ $Nucleo = "OpenSolaris" ]; then
		Nucleo=linux
else
		echo "Sistema Operativo NO SOPORTADO"
fi

Arquitectura=$(uname -m)

if	       [ $Arquitectura = "i386" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEDLLPATH="$PWD/wine/$Nucleo/x86/lib"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			export WINEDLLOVERRIDES=mshtml=wine cmd echo test
			Arquitectura="32 Bits"
	elif	[ $Arquitectura = "i486" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEDLLPATH="$PWD/wine/$Nucleo/x86/lib"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			export WINEDLLOVERRIDES=mshtml=wine cmd echo test
			Arquitectura="32 Bits"
	elif	[ $Arquitectura = "i586" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEDLLPATH="$PWD/wine/$Nucleo/x86/lib"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			export WINEDLLOVERRIDES=mshtml=wine cmd echo test
			Arquitectura="32 Bits"
	elif	[ $Arquitectura = "i686" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEDLLPATH="$PWD/wine/$Nucleo/x86/lib"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			export WINEDLLOVERRIDES=mshtml=wine cmd echo test
			Arquitectura="32 Bits"
         elif [ $Arquitectura = "x86_64" ]; then
			PATH="$PWD/wine/$Nucleo/x86_64/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86_64/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86_64/bin/wine"
			export WINEDLLPATH="$PWD/wine/$Nucleo/x86_64/lib"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			export WINEDLLOVERRIDES=mshtml=wine cmd echo test
			Arquitectura="64 Bits"
	else
		echo "Arquitectura NO SOPORTADA"
fi

Version_De_Wine=$(wine --version)
echo ""
echo ""
echo "Corriendo '$Version_De_Wine' en '$Nucleo' ( Maquina de '$Arquitectura' )"
echo ""
echo ""
echo `xrandr --current | grep current | awk '{print $8}'` >> RES1
echo `xrandr --current | grep current | awk '{print $10}'` >> RES2
cat RES2 | sed -i 's/,//g' RES2
P1RES=$(cat RES1)
P2RES=$(cat RES2)
rm RES1 RES2
echo "$P1RES"'x'"$P2RES" >> RES
RES=$(cat RES)
rm RES
cd "$ARREGLOS"
regedit -s "$Nucleo"_video.reg
regedit -s "$Nucleo"_sonido.reg
echo "REGEDIT4" >> modo_ventana.reg
echo "" >> modo_ventana.reg
echo "[HKEY_CURRENT_USER\Software\Wine\Explorer]" >> modo_ventana.reg
echo '"Desktop"="Default"' >> modo_ventana.reg
echo "" >> modo_ventana.reg
echo "[HKEY_CURRENT_USER\Software\Wine\Explorer\Desktops]" >> modo_ventana.reg
echo '"Default"'='"'""'"' >> modo_ventana.reg
regedit -s modo_ventana.reg
rm -rf modo_ventana.reg
killall -9 services.exe winedevice.exe plugplay.exe explorer.exe wineboot.exe dplaysvr.exe winemenubuilder
killall -9 winemenubuilder rpcss.exe wineserver 
tvid=$(lspci -v -s `lspci | awk '/VGA/{print $1}'` | sed -n '/Memory.*, prefetchable/s/.*\[size=\([^]]\+\)M\]/\1/p')
let "mvid"=$tvid/2
echo 'REGEDIT4' >> video.reg
echo '' >> video.reg
echo '[HKEY_CURRENT_USER\Software\Wine\Direct3D]' >> video.reg
echo '"VideoMemorySize"'='"'"$tvid"'"' >> video.reg
regedit -s video.reg && rm -rf video.reg
echo "Informacion :"
echo "Arquitectura -> `uname -m` ($Arquitectura) "
echo "DEBUG -> $WINEDEBUG "
echo "Prefijo  -> $WINEPREFIX"
echo "Cargador -> $WINELOADER"
echo "Servidor -> $WINESERVER"
echo ""
echo ""
echo "$RUTA"
echo "RUTA -> $RUTA_DEL_SOFTWARE"
cd "$RUTA_DEL_SOFTWARE"
echo ""
echo "Ejecutando el Software"
echo
BINARIO=$( ls Project64k.exe )
#BINARIOQJP=$(whereis qjoypad | grep games | awk '{print $2}' | sed 's/^[/usr/games/ \t]*//')
#xrandr -s 640x480
`wine $BINARIO` &
#`qjoypad --device "/dev/input/js0" "Project64k" --update` &

sleep 2
BINARIOPID=$(pidof $BINARIO)
#taskset -p 0xFFFFFFFF $BINARIOPID &

while Launchers=$(pidof "Project64k.exe")
	do   
	    sleep 1	
	done
#	xrandr -s $RES
	killall -9 Project64k.exe rundll32.exe control.exe
exit 0