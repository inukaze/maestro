#!/bin/bash
# 
# Autor	:	Inukaze ( Venezuela )
# Sitio		:	http://inukaze.wordpResolucions.com
# Correo-E	:	bloginukaze@gmail.com
# Licensia	:	GPL 3
#
# Acerca de este Script	:	
#
# Yo intento escribir Scripts compatibles con
# Sistemas Operativos Unix & Posix , y cualquier
# Sistema Operativo que soporte versiones de la API
# conocida como "Wine" o "WineHQ" para poder ejecutar
# software de Microsoft Windows , sin necesidad de su
# sistema operativo , y crear paquetes autocontenidos
# para sistemas operativos como por ejemplo :
# Linux , FreeBSD , OpenSolaris 
# Unix  , BSD	  , Solaris		, MacOS

# Usando versiones pre-compiladas , para arquitecturas
# como x86 & x86_64 (32 Bits & 64 Bits ) con versiones
# Especificas de Wine/WineHQ y los Arquitecturaivos oficiales
# para "Windows" para una mayor compatibilidad usando
# los requisitos de Sistema Originales y que esto pueda
# ser aprovechado , por Juegos , Programas , Software
# Ahora apartir de aqui comienza mi Script :

# Definir el directorio actual , como el principal
# del juego o programa
RUTA=""$( cd -P "$( dirname "$" )" && pwd )""

# Obtener el nombre del nucleo del sistema
Nucleo=$(uname -s)

if		[ $Nucleo = "Darwin" ]; then
		Nucleo=mac
elif		[ $Nucleo = "Linux" ]; then
		Nucleo=linux
else
		echo "Sistema Operativo NO SOPORTADO"
fi

# Determinando la arquitectura de la maquina
Arquitectura=$(uname -m)

if	       [ $Arquitectura = "i386" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			Arquitectura="32 Bits"
	elif	[ $Arquitectura = "i486" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			Arquitectura="32 Bits"
	elif	[ $Arquitectura = "i586" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			Arquitectura="32 Bits"
	elif	[ $Arquitectura = "i686" ]; then
			PATH="$PWD/wine/$Nucleo/x86/bin:$PATH"
			export WINESERVER="$PWD/wine/$Nucleo/x86/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86/bin/wine"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			Arquitectura="32 Bits"
         elif [ $Arquitectura = "x86_64" ]; then
			export WINESERVER="$PWD/wine/$Nucleo/x86_64/bin/wineserver"
			export WINELOADER="$PWD/wine/$Nucleo/x86_64/bin/wine"
			export WINEPREFIX="$PWD/wine/data"
			export WINEDEBUG=-all
			Arquitectura="64 Bits"
	else
		echo "Arquitectura NO SOPORTADA"
fi

# Muestra en la terminal La arquitectura &" >> "$RUTA"/Iniciar
# La version especifica de Wine usada" >> "$RUTA"/Iniciar
wver=$(wine --version)
echo ""
echo ""
echo "Corriendo $wver en $Nucleo ( Maquina de $Arquitectura )"
echo ""
echo ""

# Guardar la Resolucion Actual :
echo `xrandr --current | grep current | awk '{print $8}'` >> Resolucion1
echo `xrandr --current | grep current | awk '{print $10}'` >> Resolucion2
cat Resolucion2 | sed -i 's/,//g' Resolucion2
P1Resolucion=$(cat Resolucion1)
P2Resolucion=$(cat Resolucion2)
rm Resolucion1 Resolucion2
echo "$P1Resolucion"'x'"$P2Resolucion" >> Resolucion
Resolucion=$(cat Resolucion)
rm Resolucion
# Resolucion Actual Guardada.

echo 'REGEDIT4' >> audio.reg
echo '' >> audio.reg
echo '[HKEY_CURRENT_USER\Software\Wine\DirectSound]' >> audio.reg
echo '"DefaultSampleRate"="48000"' >> audio.reg
echo '"HardwareAcceleration"="Emulation"' >> audio.reg
regedit -s audio.reg
rm audio.reg

# Instalar Arreglos para el Correcto Funcionamiento
# Del Software a usar :
cd "$RUTA"/wine/data/drive_c/software/lib
cp -rf scrrun.dll "$RUTA"/wine/data/drive_c/windows/system32/
cp -rf usp10.dll "$RUTA"/wine/data/drive_c/windows/system32/
cp -rf vbscript.dll "$RUTA"/wine/data/drive_c/windows/system32/
############################ Videos : ###############################
cp -rf qasf.dll  "$RUTA"/wine/data/drive_c/windows/system32/
cp -rf wmasf.dll "$RUTA"/wine/data/drive_c/windows/system32/
cp -rf wmvcore.dll "$RUTA"/wine/data/drive_c/windows/system32/
cp -rf wmvdecod.dll "$RUTA"/wine/data/drive_c/windows/system32/
cp -rf wmvdmod.dll "$RUTA"/wine/data/drive_c/windows/system32/
cp -rf wmvsdecd.dll "$RUTA"/wine/data/drive_c/windows/system32/
##########################  Registro  ###############################
echo "REGEDIT4" >> arreglos.reg
echo "" >> arreglos.reg
echo "[HKEY_CURRENT_USER\Software\Wine\DllOverrides]" >> arreglos.reg
echo '"scrrun"="native, builtin"' >> arreglos.reg
echo '"usp10"="native, builtin"' >> arreglos.reg
echo '"vbscript"="native, builtin"' >> arreglos.reg
#################### Registro - Videos : ############################
echo '"msimg32.dll"="native, builtin"' >> arreglos.reg
echo '"msvfw32.dll"="native, builtin"' >> arreglos.reg
echo '"qasf.dll"="native, builtin"' >> arreglos.reg
echo '"wmasf.dll"="native, builtin"' >> arreglos.reg
echo '"wmvcore.dll"="native, builtin"' >> arreglos.reg
echo '"wmvdecod.dll"="native, builtin"' >> arreglos.reg
echo '"wmvdmod.dll"="native, builtin"' >> arreglos.reg
echo '"wmvsdecd.dll"="native, builtin"' >> arreglos.reg
regedit -s arreglos.reg
rm -rf arreglos.reg
cd "$RUTA"/wine/data/drive_c/windows/system32
regsvr32 atl.dll
regsvr32 scrrun.dll
regsvr32 vbscript.dll

cd "$RUTA"
rm Iniciar
mv Iniciar2 Iniciar
chmod a+x Iniciar
sh Iniciar
